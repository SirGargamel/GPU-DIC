float deformation[%DEF_D%];
const int limitsBase = subsetId * 18;
const int countsBase = subsetId * 7;
if (deformationId >= deformationCounts[countsBase + 6]) { return; }
int counter = deformationId;
deformation[0] = counter % deformationCounts[countsBase + 0];
counter = counter / deformationCounts[countsBase + 0];
deformation[1] = counter % deformationCounts[countsBase + 1];
counter = counter / deformationCounts[countsBase + 1];
deformation[2] = counter % deformationCounts[countsBase + 2];
counter = counter / deformationCounts[countsBase + 2];
deformation[3] = counter % deformationCounts[countsBase + 3];
counter = counter / deformationCounts[countsBase + 3];
deformation[4] = counter % deformationCounts[countsBase + 4];
counter = counter / deformationCounts[countsBase + 4];
deformation[5] = counter % deformationCounts[countsBase + 5];
counter = counter / deformationCounts[countsBase + 5];
deformation[0] = deformations[limitsBase + 0] + deformation[0] * deformations[limitsBase + 2];
deformation[1] = deformations[limitsBase + 3] + deformation[1] * deformations[limitsBase + 5];
deformation[2] = deformations[limitsBase + 6] + deformation[2] * deformations[limitsBase + 8];
deformation[3] = deformations[limitsBase + 9] + deformation[3] * deformations[limitsBase + 11];
deformation[4] = deformations[limitsBase + 12] + deformation[4] * deformations[limitsBase + 14];
deformation[5] = deformations[limitsBase + 15] + deformation[5] * deformations[limitsBase + 17];