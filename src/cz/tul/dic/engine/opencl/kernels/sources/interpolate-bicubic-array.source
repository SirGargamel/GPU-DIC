inline int computeIndex(const float x, const float y, const int width) {
    return (int)((y * width) + x);
}

inline int getValue(float p0, float p1, float p2, float p3, float x) {
    return p1 + 0.5 * x*(p2 - p0 + x*(2.0*p0 - 5.0*p1 + 4.0*p2 - p3 + x*(3.0*(p1 - p2) + p3 - p0)));    
}

inline int interpolate(const float x, const float y, global read_only char * image, const int imageWidth) {
    const float ix = floor(x);
    const float dx = x - ix;
    
    const float iy = floor(y);
    const float dy = y - iy;            
    
    const float arr0 = getValue(image[computeIndex(ix-1, iy-1, imageWidth)], image[computeIndex(ix, iy-1, imageWidth)], image[computeIndex(ix+1, iy-1, imageWidth)], image[computeIndex(ix+2, iy-1, imageWidth)], dy);
    const float arr1 = getValue(image[computeIndex(ix-1, iy, imageWidth)], image[computeIndex(ix, iy, imageWidth)], image[computeIndex(ix+1, iy, imageWidth)], image[computeIndex(ix+2, iy, imageWidth)], dy);
    const float arr2 = getValue(image[computeIndex(ix-1, iy+1, imageWidth)], image[computeIndex(ix, iy+1, imageWidth)], image[computeIndex(ix+1, iy+1, imageWidth)], image[computeIndex(ix+2, iy+1, imageWidth)], dy);
    const float arr3 = getValue(image[computeIndex(ix-1, iy+2, imageWidth)], image[computeIndex(ix, iy+2, imageWidth)], image[computeIndex(ix+1, iy+2, imageWidth)], image[computeIndex(ix+2, iy+2, imageWidth)], dy);    
    
    return getValue(arr0, arr1, arr2, arr3, dx);
}